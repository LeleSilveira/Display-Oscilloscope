#include <driver/dac.h>
#include "FastDAC.h"
int xres = 79; //16-1
int yres = 79; //16-1
hw_timer_t * timer = NULL;

byte imgData2[] PROGMEM = {//dog80
  0xFF, 0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 
  0x0F, 0xC0, 0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0x07, 0x80, 
  0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x07, 0x80, 0xFF, 0xFF, 
  0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x87, 0x88, 0xFF, 0xFF, 0x7F, 0x00, 
  0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0x3F, 0x00, 0xF0, 0xFF, 
  0xFF, 0xFF, 0x03, 0x02, 0xFF, 0xFF, 0x3F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 
  0x01, 0x05, 0xFF, 0xFF, 0x3F, 0x10, 0xF8, 0xFF, 0xFF, 0xFF, 0x81, 0x01, 
  0xFE, 0xFF, 0x1F, 0x10, 0xF8, 0xFF, 0xFF, 0xFF, 0x81, 0x0C, 0xFE, 0xFF, 
  0x0F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x20, 0x02, 0xFC, 0xFF, 0x0F, 0x08, 
  0xF8, 0xFF, 0xFF, 0xFF, 0x90, 0x06, 0xFC, 0xFF, 0x0F, 0x04, 0xFC, 0xFF, 
  0xFF, 0xFF, 0x00, 0x02, 0xFC, 0xFF, 0x1F, 0x08, 0xF8, 0xFF, 0xFF, 0xFF, 
  0x40, 0x01, 0xFF, 0xFF, 0x7F, 0x10, 0xF0, 0xFF, 0xFF, 0xFF, 0xE0, 0x80, 
  0xEF, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0xBF, 0x90, 0xC1, 0xDF, 0xFF, 
  0xDF, 0x05, 0xC0, 0xFF, 0xFF, 0x7F, 0xC0, 0xE1, 0xB7, 0xFF, 0x7F, 0x07, 
  0x00, 0xFF, 0xFF, 0x3F, 0xE1, 0x61, 0xEF, 0xF7, 0xFF, 0x03, 0x00, 0xFF, 
  0xFF, 0x3F, 0x80, 0xE3, 0xFB, 0xBE, 0xFF, 0x0F, 0x00, 0xFE, 0xFF, 0x3F, 
  0xB0, 0xF2, 0xFD, 0x5B, 0x6F, 0x06, 0x00, 0xF8, 0xFF, 0x3F, 0x80, 0xEC, 
  0xFD, 0xC7, 0xAE, 0x0F, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0xF7, 0xDF, 0x82, 
  0x3F, 0x18, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x78, 0xFF, 0x01, 0x3E, 0x30, 
  0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x5C, 0xFF, 0x00, 0x28, 0x60, 0x04, 0xF0, 
  0xFF, 0x7F, 0x00, 0xFC, 0xBF, 0x00, 0x38, 0xC0, 0x0D, 0xE0, 0xFF, 0xFF, 
  0x01, 0xEF, 0x5F, 0x00, 0x20, 0x80, 0x07, 0x80, 0xFF, 0xFF, 0x81, 0xFE, 
  0x3F, 0x00, 0x70, 0x00, 0x06, 0x80, 0xFF, 0xFF, 0xFD, 0xFF, 0x1F, 0x00, 
  0x20, 0x00, 0x1E, 0x80, 0xFF, 0xFF, 0xFF, 0xFB, 0x0F, 0x07, 0x00, 0x80, 
  0x1E, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x7F, 0x00, 0xC0, 0x3B, 0x00, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFB, 0x00, 0x80, 0x1D, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF1, 0xFB, 0x00, 0x90, 0x3D, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 
  0xF1, 0xFF, 0x01, 0xF0, 0x3F, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 
  0x00, 0xE1, 0x7D, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0x06, 0xC2, 
  0x3C, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x80, 0x04, 0x00, 0x7C, 0x80, 
  0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x01, 0x00, 0xF8, 0x81, 0xFF, 0xFF, 
  0xFF, 0x37, 0x08, 0x00, 0x01, 0x40, 0xF8, 0xE1, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0x00, 0x00, 0x00, 0xD9, 0xC1, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0xF0, 0xE7, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0xE0, 0xE3, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFB, 
  0xFF, 0xFF, 0x1F, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xF5, 0xFF, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFB, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFB, 0xFF, 0xFF, 0x5F, 0x00, 0x00, 0x00, 
  0x00, 0xE0, 0xAF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x40, 0x00, 0x08, 0xF0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x6F, 0x00, 0x00, 0x00, 0x03, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x00, 0x58, 0x81, 0x19, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x9F, 0x00, 0x70, 0x44, 0x02, 0xE0, 0xFF, 0xFC, 0xFF, 0xFF, 0x1F, 0x00, 
  0xF8, 0xE1, 0x06, 0xE0, 0xFF, 0xFD, 0xFF, 0xFF, 0x3F, 0x00, 0xE8, 0x0B, 
  0x07, 0xE0, 0xFF, 0xFC, 0xFF, 0xFF, 0x5F, 0x00, 0x38, 0xA4, 0x07, 0xC0, 
  0x7F, 0xFC, 0xFF, 0xFF, 0x7F, 0x01, 0xD0, 0xD7, 0x6F, 0xC0, 0x7F, 0xFC, 
  0xFF, 0xFF, 0xFF, 0x00, 0x84, 0xE7, 0x32, 0x80, 0x7F, 0xFC, 0xFF, 0xFF, 
  0xFF, 0x0B, 0xDC, 0xFE, 0x8F, 0xE0, 0x3D, 0xFE, 0xFF, 0xF7, 0xFF, 0x01, 
  0x7E, 0xFF, 0x1F, 0xD0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFA, 0xDE, 
  0xFF, 0xF9, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x67, 0xFB, 0x7F, 0xBF, 0xFD, 
  0xCF, 0xFF, 0xFF, 0xF7, 0xFF, 0x95, 0xFE, 0xFF, 0xF7, 0xB7, 0xE2, 0xFF, 
  0xFF, 0xEF, 0xFF, 0x49, 0xE5, 0xFF, 0xFF, 0x07, 0xF0, 0xFF, 0xFF, 0x9B, 
  0xFF, 0x07, 0xD8, 0xFF, 0xFF, 0xA6, 0xF9, 0xFF, 0xFF, 0x3B, 0xFF, 0x81, 
  0xA0, 0xFF, 0x3F, 0xD0, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0x1F, 0xC8, 0xFF, 
  0x07, 0xA0, 0xFF, 0xFF, 0xFF, 0x7F, 0xF9, 0x2B, 0xB0, 0xF7, 0x07, 0xC0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0x59, 0xC5, 0xFF, 0x01, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF5, 0x23, 0x30, 0xDE, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xCF, 0x87, 0xC2, 0xB7, 0x00, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0x4F, 0x47, 
  0x02, 0x1A, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x02, 0x04, 
  0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F, 0x00, 0x08, 0x08, 0x00, 0xE0, 
  0xFD, 0xFF, 0xFF, 0xFF, 0x3F, 0x06, 0x00, 0x00, 0x00, 0xA0, 0xFF, 0xFF, 
  0xFE, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFC, 0xFF, 0xFD, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0xE0, 0xFD, 0xFF, 0xFD, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x70, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFE, 0xFF, 0xFF, 0x26, 0x00, 0x00, 0x00, 0xF8, 0xFD, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x11, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFF,
}; 

byte imgData4[] PROGMEM = {//dog80
  0xFF, 0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 
  0x0F, 0xC0, 0xFF, 0xFF, 0xFF, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0x07, 0x80, 
  0xFF, 0xFF, 0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x07, 0x80, 0xFF, 0xFF, 
  0xFF, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x87, 0x88, 0xFF, 0xFF, 0x7F, 0x00, 
  0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0x3F, 0x00, 0xF0, 0xFF, 
  0xFF, 0xFF, 0x03, 0x02, 0xFF, 0xFF, 0x3F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 
  0x01, 0x05, 0xFF, 0xFF, 0x3F, 0x10, 0xF8, 0xFF, 0xFF, 0xFF, 0x81, 0x01, 
  0xFE, 0xFF, 0x1F, 0x10, 0xF8, 0xFF, 0xFF, 0xFF, 0x81, 0x0C, 0xFE, 0xFF, 
  0x0F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x20, 0x02, 0xFC, 0xFF, 0x0F, 0x08, 
  0xF8, 0xFF, 0xFF, 0xFF, 0x90, 0x06, 0xFC, 0xFF, 0x0F, 0x04, 0xFC, 0xFF, 
  0xFF, 0xFF, 0x00, 0x02, 0xFC, 0xFF, 0x1F, 0x08, 0xF8, 0xFF, 0xFF, 0xFF, 
  0x40, 0x01, 0xFF, 0xFF, 0x7F, 0x10, 0xF0, 0xFF, 0xFF, 0xFF, 0xE0, 0x80, 
  0xEF, 0xFF, 0xFF, 0x00, 0xE0, 0xFF, 0xFF, 0xBF, 0x90, 0xC1, 0xDF, 0xFF, 
  0xDF, 0x05, 0xC0, 0xFF, 0xFF, 0x7F, 0xC0, 0xE1, 0xB7, 0xFF, 0x7F, 0x07, 
  0x00, 0xFF, 0xFF, 0x3F, 0xE1, 0x61, 0xEF, 0xF7, 0xFF, 0x03, 0x00, 0xFF, 
  0xFF, 0x3F, 0x80, 0xE3, 0xFB, 0xBE, 0xFF, 0x0F, 0x00, 0xFE, 0xFF, 0x3F, 
  0xB0, 0xF2, 0xFD, 0x5B, 0x6F, 0x06, 0x00, 0xF8, 0xFF, 0x3F, 0x80, 0xEC, 
  0xFD, 0xC7, 0xAE, 0x0F, 0x00, 0xF8, 0xFF, 0x1F, 0x00, 0xF7, 0xDF, 0x82, 
  0x3F, 0x18, 0x00, 0xF0, 0xFF, 0x3F, 0x00, 0x78, 0xFF, 0x01, 0x3E, 0x30, 
  0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x5C, 0xFF, 0x00, 0x28, 0x60, 0x04, 0xF0, 
  0xFF, 0x7F, 0x00, 0xFC, 0xBF, 0x00, 0x38, 0xC0, 0x0D, 0xE0, 0xFF, 0xFF, 
  0x01, 0xEF, 0x5F, 0x00, 0x20, 0x80, 0x07, 0x80, 0xFF, 0xFF, 0x81, 0xFE, 
  0x3F, 0x00, 0x70, 0x00, 0x06, 0x80, 0xFF, 0xFF, 0xFD, 0xFF, 0x1F, 0x00, 
  0x20, 0x00, 0x1E, 0x80, 0xFF, 0xFF, 0xFF, 0xFB, 0x0F, 0x07, 0x00, 0x80, 
  0x1E, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x7F, 0x00, 0xC0, 0x3B, 0x00, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFB, 0x00, 0x80, 0x1D, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF1, 0xFB, 0x00, 0x90, 0x3D, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 
  0xF1, 0xFF, 0x01, 0xF0, 0x3F, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 
  0x00, 0xE1, 0x7D, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0x06, 0xC2, 
  0x3C, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x80, 0x04, 0x00, 0x7C, 0x80, 
  0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x01, 0x00, 0xF8, 0x81, 0xFF, 0xFF, 
  0xFF, 0x37, 0x08, 0x00, 0x01, 0x40, 0xF8, 0xE1, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0x00, 0x00, 0x00, 0xD9, 0xC1, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0xF0, 0xE7, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0xE0, 0xE3, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFB, 
  0xFF, 0xFF, 0x1F, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xF5, 0xFF, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFB, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFB, 0xFF, 0xFF, 0x5F, 0x00, 0x00, 0x00, 
  0x00, 0xE0, 0xAF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x40, 0x00, 0x08, 0xF0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x6F, 0x00, 0x00, 0x00, 0x03, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x00, 0x58, 0x81, 0x19, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x9F, 0x00, 0x70, 0x44, 0x02, 0xE0, 0xFF, 0xFC, 0xFF, 0xFF, 0x1F, 0x00, 
  0xF8, 0xE1, 0x06, 0xE0, 0xFF, 0xFD, 0xFF, 0xFF, 0x3F, 0x00, 0xE8, 0x0B, 
  0x07, 0xE0, 0xFF, 0xFC, 0xFF, 0xFF, 0x5F, 0x00, 0x38, 0xA4, 0x07, 0xC0, 
  0x7F, 0xFC, 0xFF, 0xFF, 0x7F, 0x01, 0xD0, 0xD7, 0x6F, 0xC0, 0x7F, 0xFC, 
  0xFF, 0xFF, 0xFF, 0x00, 0x84, 0xE7, 0x32, 0x80, 0x7F, 0xFC, 0xFF, 0xFF, 
  0xFF, 0x0B, 0xDC, 0xFE, 0x8F, 0xE0, 0x3D, 0xFE, 0xFF, 0xF7, 0xFF, 0x01, 
  0x7E, 0xFF, 0x1F, 0xD0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFA, 0xDE, 
  0xFF, 0xF9, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x67, 0xFB, 0x7F, 0xBF, 0xFD, 
  0xCF, 0xFF, 0xFF, 0xF7, 0xFF, 0x95, 0xFE, 0xFF, 0xF7, 0xB7, 0xE2, 0xFF, 
  0xFF, 0xEF, 0xFF, 0x49, 0xE5, 0xFF, 0xFF, 0x07, 0xF0, 0xFF, 0xFF, 0x9B, 
  0xFF, 0x07, 0xD8, 0xFF, 0xFF, 0xA6, 0xF9, 0xFF, 0xFF, 0x3B, 0xFF, 0x81, 
  0xA0, 0xFF, 0x3F, 0xD0, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0x1F, 0xC8, 0xFF, 
  0x07, 0xA0, 0xFF, 0xFF, 0xFF, 0x7F, 0xF9, 0x2B, 0xB0, 0xF7, 0x07, 0xC0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0x59, 0xC5, 0xFF, 0x01, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF5, 0x23, 0x30, 0xDE, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xCF, 0x87, 0xC2, 0xB7, 0x00, 0x70, 0xFF, 0xFF, 0xFF, 0xFF, 0x4F, 0x47, 
  0x02, 0x1A, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x02, 0x04, 
  0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F, 0x00, 0x08, 0x08, 0x00, 0xE0, 
  0xFD, 0xFF, 0xFF, 0xFF, 0x3F, 0x06, 0x00, 0x00, 0x00, 0xA0, 0xFF, 0xFF, 
  0xFE, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFC, 0xFF, 0xFD, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0xE0, 0xFD, 0xFF, 0xFD, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x70, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFE, 0xFF, 0xFF, 0x26, 0x00, 0x00, 0x00, 0xF8, 0xFD, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x11, 0x00, 0x00, 0x00, 0xF8, 0xFE, 0xFF,
}; 

void IRAM_ATTR displayOsci(byte * frame, int xres, int yres, double xo, double yo){
  DACPrepare(true);
   int i,j,k,z,yi=yres,y2=(xres+1)*(yres+1)/8,stp=y2/(yres+1);
  for(k =y2; k >= stp; k-=stp){//2*yres+1=31
    //Serial.println("loop1");
      z=k;
      for(j = 0;j <=xres ; j++){
        //Serial.println("loop2");
        i=j;
        if(j>=8){
          i=j-8*(int)(j/8.0);
          z=k-(int)(j/8.0) ;
        }
        byte mask = 0x01 << i;
        byte answer = (frame[y2-z] & mask) >> i;
        if (answer != 0x01) {
          DAC1Write(round((double)j * xo / (double)xres));//dac_output_voltage(DAC_CHANNEL_1, round((float)j * 255.0 / (float)xres));
          DAC2Write(round((double)yi * yo / (double)yres));//dac_output_voltage(DAC_CHANNEL_2, round((float)yi * 255.0 / (float)yres));
         // delayMicroseconds(10);//depende da qtd de pontos
        } 
      }
    yi=yi-1;
  }
   DACUnprepare(true);
  
}

void IRAM_ATTR irq_handler() {
  displayOsci(imgData4, 79, 79,255.0,255.0);//4,63,63
}

void timer_start_task(void *argm) {
     timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &irq_handler, true);
  timerAlarmWrite(timer, 19000, true); // 1.000.000 us = 1s
  timerAlarmEnable(timer);

    vTaskDelete(NULL);
}

void setup() {
  dac_output_enable(DAC_CHANNEL_1);
  dac_output_enable(DAC_CHANNEL_2);
  Serial.begin(115200);
  rtc_clk_cpu_freq_set(RTC_CPU_FREQ_240M);
  Serial.println("CPU Clockspeed: ");
  Serial.println(rtc_clk_cpu_freq_value(rtc_clk_cpu_freq_get()));   //PRO_CPU_NUM ou 0
  xTaskCreatePinnedToCore(timer_start_task, "timer_start", 4096, NULL, 0, NULL,PRO_CPU_NUM);//All ESP-IDF protocol stuff (UART, WiFi, BLE, etc.) run in CPU 0 (PRO_CPU_NUM)
 
}


//interrupção options: desenhar a img toda, desenhar um pixel
void loop() {
 // displayOsci(imgData4, 63, 63,255.0,255.0);//4,63,63
  
}
