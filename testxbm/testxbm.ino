#include <driver/dac.h>
#include "FastDAC.h"
int xres = 127; //16-1
int yres = 127; //16-1
hw_timer_t * timer = NULL;

byte imgData2[] PROGMEM = {//flor64
  
  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 
  0x00, 0x10, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0xF0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
  0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x80, 0x00, 0xFC, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 
  0x10, 0x14, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 
  0x04, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x40, 0x03, 0xF8, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x90, 0x55, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x04, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0F, 0x68, 0x04, 0xF0, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 
  0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x82, 0x1A, 0xF0, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x40, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0x20, 0x29, 0xE0, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x08, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0x54, 0x22, 0xC0, 0xFF, 0xFF, 0xFF, 0x0F, 0x80, 
  0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x69, 0x09, 0xC0, 0xFF, 
  0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 
  0x04, 0x06, 0x80, 0xFF, 0xFF, 0xFF, 0x07, 0x40, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x03, 0xDA, 0x09, 0x80, 0xFD, 0xFF, 0xFF, 0x0F, 0xD0, 
  0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x22, 0x02, 0xC0, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x20, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
  0x01, 0x01, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0x60, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x01, 0xD8, 0x01, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
  0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x60, 0x00, 0xFC, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x81, 0x00, 0xD0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
  0xAC, 0x00, 0xFE, 0xF6, 0xFF, 0xFF, 0xFB, 0xA1, 0x02, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x01, 0x35, 0x00, 0xFF, 0xF3, 0xFF, 0xFF, 0xBF, 0x01, 
  0x01, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0xE8, 0x80, 0xFF, 0xEF, 
  0xFF, 0xFF, 0xDF, 0x5E, 0x01, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0x7F, 0x02, 
  0xFA, 0x81, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x9F, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0xFF, 0x7F, 0x04, 0xBC, 0x81, 0xFF, 0xFD, 0xDF, 0xFF, 0xFF, 0x27, 
  0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0x7F, 0x04, 0xE4, 0xC3, 0xBF, 0xB6, 
  0x77, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 0x7F, 0x08, 
  0x7E, 0xC1, 0xBF, 0xFF, 0xE5, 0xF9, 0xD7, 0x5F, 0x00, 0x00, 0xC0, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x08, 0x66, 0xE1, 0xE5, 0xFF, 0xFF, 0xFF, 0x7B, 0x7F, 
  0x00, 0x00, 0xA0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x6C, 0xE9, 0xDF, 0xFD, 
  0x9B, 0x75, 0x9F, 0x7E, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 
  0x64, 0xE9, 0xFF, 0xFF, 0x3B, 0x66, 0xFE, 0x7B, 0x00, 0x00, 0x00, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x00, 0xA0, 0xF8, 0x9B, 0x7F, 0x5F, 0xFD, 0x2F, 0xE0, 
  0x01, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x1F, 0x00, 0x40, 0xF5, 0xF9, 0xFF, 
  0x06, 0xE8, 0x7F, 0xE0, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0xAE, 0xF7, 0xBF, 0x01, 0x40, 0x3B, 0x80, 0x07, 0x08, 0x00, 0xFE, 
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x7A, 0xFE, 0xBF, 0x01, 0x80, 0x1A, 0x00, 
  0x07, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xBC, 0xFD, 0xFF, 
  0x01, 0x80, 0x7F, 0x00, 0x0E, 0x14, 0x00, 0xF4, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0xFA, 0xFF, 0xEF, 0x01, 0x00, 0x16, 0x00, 0x3E, 0x0E, 0x00, 0xE8, 
  0xFF, 0xFF, 0xFF, 0x06, 0x00, 0xFE, 0xFE, 0x9B, 0x00, 0x00, 0x7C, 0x00, 
  0xF8, 0x13, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xDF, 0xFF, 0x3F, 
  0x00, 0x00, 0x54, 0x00, 0xE0, 0x06, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x41, 0xBE, 0xFF, 0x5F, 0x00, 0x00, 0xF8, 0x00, 0xC0, 0x5F, 0x00, 0xE0, 
  0xFF, 0xFF, 0xFF, 0x87, 0xD1, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xB0, 0x00, 
  0x00, 0x57, 0x00, 0xA0, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0x0E, 
  0x00, 0x00, 0x40, 0x00, 0x00, 0x2E, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x7F, 0xDF, 0x03, 0x00, 0x02, 0x60, 0x00, 0x00, 0x1E, 0x00, 0x80, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x5E, 0x00, 0x60, 0x00, 
  0x78, 0x7A, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x82, 
  0xFF, 0x02, 0x00, 0x00, 0xF8, 0x54, 0x00, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xBF, 0xFF, 0xEF, 0xE3, 0xFF, 0x07, 0x40, 0x00, 0xF8, 0xBF, 0x00, 0x80, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF2, 0xFF, 0x0F, 0x00, 0x00, 
  0xFC, 0xFE, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFB, 
  0xF7, 0x1F, 0x80, 0x00, 0xE2, 0x7C, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x5F, 0xFC, 0xC7, 0x1F, 0x00, 0x00, 0xE2, 0xFF, 0x00, 0x80, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0x3F, 0xFC, 0xFF, 0x3F, 0x00, 0x00, 
  0xFD, 0x5D, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFE, 
  0xBF, 0x3F, 0x00, 0x01, 0xFE, 0xFF, 0x01, 0x40, 0xFF, 0xFF, 0xFF, 0xBF, 
  0xFF, 0xF7, 0x0F, 0xF8, 0xFF, 0xBF, 0x01, 0x02, 0xFE, 0xFC, 0x01, 0x80, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xBF, 0xE9, 0xFF, 0x7F, 0x00, 0x0C, 
  0xFE, 0xFC, 0x02, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x80, 
  0xFF, 0x8F, 0x02, 0x10, 0x70, 0xDC, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x7F, 0xFF, 0x0F, 0x00, 0x64, 0xB4, 0x01, 0x10, 0x00, 0xFC, 0x05, 0xC0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x47, 0x00, 0x00, 0x40, 0x02, 0x40, 
  0x00, 0xFC, 0x43, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x01, 
  0x00, 0x80, 0x00, 0x00, 0x02, 0xFC, 0x17, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFC, 0xAF, 0x80, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0xF8, 0x5F, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x59, 0x00, 0x06, 
  0x00, 0x10, 0x00, 0x00, 0x40, 0xF8, 0x1F, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xB0, 0x7F, 0xF8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x11, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xD0, 0x3F, 0xEA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xBF, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xBF, 0xF4, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x57, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x97, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x3E, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x9C, 0xFE, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xF0, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xDF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0xFF, 0xDF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2B, 0x00, 0x00, 0x50, 
  0x00, 0x80, 0x09, 0x00, 0xFE, 0xAF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x13, 0x00, 0x00, 0x28, 0x00, 0x00, 0x14, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x02, 0x00, 0xA0, 0x01, 0x00, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x04, 0x92, 
  0x80, 0x36, 0x0C, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 
  0x23, 0x00, 0x00, 0x3D, 0x02, 0x98, 0x01, 0x00, 0xFE, 0xFF, 0xEF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x1B, 0x00, 0x00, 0xAF, 0x02, 0xF8, 0x09, 0x00, 
  0xFE, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x76, 
  0x49, 0x4A, 0x02, 0x00, 0xFE, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x17, 0x00, 0x00, 0xF7, 0x01, 0xB1, 0x05, 0x00, 0xFC, 0xFF, 0xCF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x6F, 0xA5, 0xEC, 0x81, 0x00, 
  0xFC, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x02, 0x00, 0xFE, 
  0x0B, 0x76, 0x0D, 0x00, 0xFE, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x9F, 0x00, 0x00, 0xBA, 0xB5, 0xDA, 0x01, 0x00, 0xF8, 0xFF, 0xC7, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x25, 0x00, 0x00, 0x75, 0x2F, 0xF5, 0x97, 0x00, 
  0xF8, 0xFF, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xEA, 
  0x92, 0xDE, 0x1A, 0x02, 0xF0, 0xFF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x1F, 0x02, 0x00, 0x41, 0x9B, 0x5D, 0x53, 0x00, 0xF8, 0xFF, 0xE1, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x05, 0x88, 0xE6, 0xBD, 0xFD, 0x2D, 0x00, 
  0xF4, 0xDF, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x90, 0x85, 
  0xE7, 0x7F, 0x05, 0x03, 0xF8, 0xDF, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x97, 0x90, 0xF7, 0x7F, 0xFF, 0x9F, 0x00, 0xFA, 0x7F, 0xE0, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x5F, 0xCA, 0x7F, 0xFE, 0xFF, 0xA7, 0x00, 
  0xFA, 0xFD, 0xF1, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0x40, 0xF2, 0xFF, 
  0x7F, 0xFF, 0x5F, 0x07, 0xFF, 0xBF, 0xF9, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 
  0xFF, 0x3B, 0xBA, 0xBF, 0xFF, 0xDF, 0x9F, 0xE7, 0xFF, 0x3F, 0xFD, 0xFF, 
  0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0x87, 0xC6, 0xFE, 0xFB, 0xFE, 0xFF, 0xFE, 
  0xFF, 0x07, 0xFE, 0xFF, 0xFF, 0xFF, 0xFA, 0xFF, 0xFF, 0xDE, 0xD5, 0xFF, 
  0x7F, 0xFF, 0xFF, 0xB7, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 
  0xBF, 0x2A, 0xAA, 0xFA, 0xFF, 0xFF, 0xFB, 0x6F, 0x49, 0xC1, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x5D, 0xFF, 0xFF, 0x05, 0x35, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 
  0x50, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0x16, 0x80, 0xDA, 
  0xFF, 0xFF, 0xDB, 0x77, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0xFF, 
  0xFF, 0x0B, 0x02, 0xF4, 0xFF, 0xFF, 0xFF, 0xBF, 0x58, 0xFC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x37, 0xFC, 0xFF, 0x92, 0x40, 0x69, 0xFF, 0xFF, 0xFF, 0x00, 
  0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2E, 0x78, 0x7F, 0x17, 0x50, 0x55, 
  0xFF, 0xFF, 0x3F, 0x00, 0xDA, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xF5, 
  0xFF, 0x19, 0x04, 0xE8, 0xBF, 0xFF, 0x07, 0x00, 0xF4, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFD, 0xE1, 0xFF, 0x25, 0x80, 0xF9, 0xFF, 0xFF, 0x03, 0x00, 
  0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x8F, 0xFF, 0x9A, 0x26, 0x54, 
  0xFB, 0xFF, 0x00, 0x00, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8A, 
  0xFF, 0xA1, 0x43, 0xB9, 0xFD, 0x7F, 0x01, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xFE, 0x43, 0x20, 0xE6, 0x7B, 0x57, 0x00, 0x00, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0xFF, 0xAB, 0x86, 0x50, 
  0xFB, 0x3F, 0x00, 0x00, 0x5D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0x7F, 
  0xFA, 0x47, 0x05, 0xA8, 0xDE, 0x05, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xDF, 0xD1, 0x43, 0x08, 0x92, 0xCB, 0x0A, 0x00, 0x00, 
  0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xA9, 0x06, 0x25, 0x98, 
  0x7C, 0x01, 0x00, 0x00, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x86, 0x09, 0x00, 0x00, 0xA6, 0x00, 0x00, 0x00, 0xAC, 0xFE, 0xFF, 0xFF, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xA3, 0x00, 0x64, 0x80, 0x20, 0x00, 0x00, 0x00, 
  0xFA, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0x4B, 0x00, 0x00, 0x00, 
  0x84, 0x00, 0x00, 0x00, 0xB6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFD, 0xFF, 0xFF, 
  0xFE, 0xFF, 0xFF, 0xFF, 0x0F, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xEC, 0xFE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0x16, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xA8, 0xFD, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 
  0x2B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 
  0xFD, 0xFF, 0xFF, 0xFF, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7C, 0xFD, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xFC, 0xFD, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 
  0x7B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0xF7, 0xFF, 0xFF, 
  0xFA, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xFA, 0xFD, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7F, 0xFD, 0xFF, 0xFF, 0xF4, 0xFF, 0xFF, 0xFF, 
  0x7F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xAF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0xFF, 0xFB, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0x5F, 0x15, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFD, 0xFF, 0xFF, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xBF, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 
  0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x42, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0xC0, 0x7F, 0xFE, 0xFF, 0xFF, 
}; 

byte imgData4[] PROGMEM = {//dog64
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x3F, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 
  0xFF, 0x1F, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x1F, 0xC0, 0xFF, 
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 
  0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0x3F, 0x24, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 
  0xFF, 0x1F, 0x58, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 0xFF, 0x1F, 0x21, 0xF8, 
  0xFF, 0x03, 0xC1, 0xFF, 0xFF, 0x1F, 0x14, 0xF8, 0xFF, 0x83, 0xC0, 0xFF, 
  0xFF, 0x1F, 0x19, 0xF8, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0x0F, 0x04, 0xFC, 
  0xFF, 0x87, 0xC0, 0xFF, 0xFF, 0x1F, 0x02, 0xDE, 0xFF, 0x1F, 0x80, 0xFF, 
  0xFF, 0x0F, 0x0C, 0xDF, 0xFF, 0x1B, 0x00, 0xFE, 0xFF, 0x0F, 0x8E, 0xFF, 
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x07, 0x87, 0xEF, 0xF5, 0x3B, 0x00, 0xF8, 
  0xFF, 0x07, 0x9C, 0xFB, 0xDF, 0xFF, 0x00, 0xF8, 0xFF, 0x07, 0xC8, 0xBD, 
  0xB3, 0xC7, 0x00, 0xE0, 0xFF, 0x07, 0xE0, 0xFF, 0x81, 0x07, 0x01, 0xE0, 
  0xFF, 0x07, 0xE0, 0xBE, 0x00, 0x06, 0x23, 0xE0, 0xFF, 0x0F, 0x60, 0xFF, 
  0x01, 0x06, 0x66, 0xC0, 0xFF, 0x1F, 0xF0, 0x7F, 0x00, 0x0C, 0x38, 0x80, 
  0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0x04, 0x70, 0x80, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0x08, 0x40, 0x00, 0xFF, 0xFF, 0xFB, 0x9B, 0x0F, 0x00, 0x7C, 0x00, 
  0xFF, 0xFF, 0xFF, 0xEF, 0x3B, 0x00, 0x6E, 0x00, 0xFF, 0xFF, 0xFF, 0xE3, 
  0x7D, 0x00, 0xF8, 0x00, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0x00, 0xFF, 0x00, 
  0xFF, 0xFF, 0xFF, 0x83, 0x7F, 0x00, 0xE6, 0x81, 0xFF, 0xFF, 0xFF, 0x03, 
  0x80, 0x00, 0xE0, 0x05, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0x83, 
  0xFF, 0xFF, 0x7F, 0x20, 0x80, 0x00, 0xC0, 0xC7, 0xFF, 0xFF, 0x1F, 0x00, 
  0x00, 0x00, 0xC0, 0xC7, 0xFF, 0xFF, 0x0F, 0x80, 0x00, 0x00, 0x80, 0xE7, 
  0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xFF, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0xF8, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xF7, 
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x02, 0x7E, 0xFF, 0xFF, 0xFF, 0x00, 0x10, 
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x50, 0x60, 0x02, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x02, 0x60, 0xC1, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x01, 0xF0, 
  0x51, 0x01, 0xFE, 0xFB, 0xFF, 0xFF, 0x03, 0xE0, 0xC9, 0x02, 0xFE, 0xF9, 
  0xFF, 0xFF, 0x03, 0xA0, 0x66, 0x05, 0xFC, 0xF9, 0xFF, 0xFF, 0x27, 0x90, 
  0xFB, 0x03, 0xFE, 0xF9, 0xFF, 0xFF, 0x1F, 0xB8, 0xF7, 0x07, 0x7C, 0xFC, 
  0xFF, 0xFF, 0xA7, 0x7E, 0xFF, 0x11, 0xFF, 0xFC, 0xFF, 0xFE, 0x5F, 0xF8, 
  0xFF, 0xBF, 0x3F, 0xFF, 0xFF, 0xFF, 0x7F, 0xED, 0xF7, 0x7F, 0x9D, 0xFF, 
  0xFF, 0xF7, 0x1F, 0xB8, 0xFF, 0x7F, 0xC8, 0xFF, 0xFF, 0xF7, 0x2F, 0xE1, 
  0xFF, 0x1F, 0xF5, 0xFF, 0xFF, 0xE7, 0x3F, 0x90, 0xFF, 0x01, 0xFE, 0xFF, 
  0xFF, 0x9E, 0x9F, 0xC8, 0xFF, 0x01, 0xFD, 0xFF, 0xFF, 0x1F, 0x9F, 0x91, 
  0xBF, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x3E, 0xE1, 0x3A, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1A, 0x40, 0x0F, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x09, 0x06, 
  0x00, 0x00, 0xF6, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x13, 0x00, 0x00, 0x00, 0xEA, 0xFF, 0xFE, 0xFF, 0x06, 0x00, 
  0x00, 0x00, 0xF4, 0xFF, 0xFE, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0xFF, 0x0F, 0x00, 
  0x00, 0x00, 0xEF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x4F, 0x00, 0x00, 0x80, 0xF7, 0xFF, 
}; 
void IRAM_ATTR displayOsci(byte * frame, int xres, int yres, double xo, double yo){
  DACPrepare(true);
  int i,j,k,z,yi=yres,stp=(int)((yres+1)/8.0),y2=stp*yres+1;
  for(k =y2; k >= 0; k-=stp){//2*yres+1=31
    //Serial.println("loop1");
      z=k;
      for(j = 0;j <=xres ; j++){
        //Serial.println("loop2");
        i=j;
        if(j>=8){
          i=j-8*(int)(j/8.0);
          z=k-(int)(j/8.0) ;
        }
        byte mask = 0x01 << i;
        byte answer = (frame[y2-z] & mask) >> i;
        if (answer != 0x01) {
          DAC1Write(round((double)j * xo / (double)xres));//dac_output_voltage(DAC_CHANNEL_1, round((float)j * 255.0 / (float)xres));
          DAC2Write(round((double)yi * yo / (double)yres));//dac_output_voltage(DAC_CHANNEL_2, round((float)yi * 255.0 / (float)yres));
           
           /*Serial.print("x:");
           Serial.println(round((float)j * 255.0 / (float)xres));
           Serial.print("y:");
           Serial.println(round((float)yi * 255.0 / (float)yres));*/
         // delayMicroseconds(10);//depende da qtd de pontos
        } 
      }
    yi=yi-1;
  }
   DACUnprepare(true);
  
}
void IRAM_ATTR onTimer() {
  displayOsci(imgData4, 127, 127,255.0,255.0);//4,63,63
}


void setup() {
  dac_output_enable(DAC_CHANNEL_1);
  dac_output_enable(DAC_CHANNEL_2);
  Serial.begin(115200);
 rtc_clk_cpu_freq_set(RTC_CPU_FREQ_240M);
  Serial.println("CPU Clockspeed: ");
  Serial.println(rtc_clk_cpu_freq_value(rtc_clk_cpu_freq_get()));
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer, 50000, true); // 1.000.000 us = 1s
  timerAlarmEnable(timer);
  //speed test
  /*
  Serial.print("Writing 1M Samples with API functions: ");
  int t = millis();
  for(int i = 0; i < 1000000; i++)
    dac_output_voltage(DAC_CHANNEL_1, i);
  int m = millis() - t;
  Serial.print(1000000000 / (millis() - t)); 
  Serial.println(" Sa/s"); 
  Serial.print("Writing 1M Samples with FastDAC functions: ");
  t = millis();
  DACPrepare(false);
  for(int i = 0; i < 1000000; i++)
  {
    DAC1Write(i);
  }
  DACUnprepare(false);
  Serial.print(1000000000 / (millis() - t));
  Serial.println(" Sa/s");  
*/
}


//interrupção options: desenhar a img toda, desenhar um pixel
void loop() {
  //displayOsci(imgData4, 63, 63,255.0,255.0);//4,63,63
  
}
