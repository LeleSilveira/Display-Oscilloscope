#include <WiFi.h>
#include <driver/dac.h>
#include "FastDAC.h"

void copy(byte* src, byte* dst, int len) {
    memcpy(dst, src, sizeof(src[0])*len);
}

const char* ssid     = "leticia";
const char* password = "analeticia";
int xres = 63; //16-1
int yres = 63; //16-1
int xo=255.0;
int yo=255.0;
hw_timer_t * timer = NULL;
byte PROGMEM imgData[640]; //64x64/8=512

byte imgData1[] PROGMEM = {//flor64
  0xFF, 0xFF, 0xDF, 0x7B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 
  0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7B, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFD, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0x07, 0x37, 0xFF, 0xFF, 0x7F, 
  0xE7, 0xFF, 0xFF, 0x07, 0x1F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x04, 
  0x0F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFD, 0x07, 0x00, 0x06, 0xFE, 0xFF, 0xFF, 
  0xEB, 0xFF, 0x07, 0x08, 0x06, 0xFE, 0xFF, 0xFF, 0xBF, 0xFB, 0x0F, 0x00, 
  0x02, 0xC2, 0xFF, 0xFF, 0xF7, 0xFF, 0x08, 0x00, 0x02, 0xC1, 0xFF, 0xFF, 
  0xDF, 0x7F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x57, 0x00, 0x00, 
  0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xF7, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x07, 0x20, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x02, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x50, 0x10, 0x00, 0xFF, 0xFF, 
  0xFF, 0x07, 0x00, 0xE8, 0x03, 0x00, 0xF8, 0xFF, 0xFF, 0x07, 0x00, 0xB8, 
  0x06, 0x00, 0xF8, 0xFF, 0xFF, 0x07, 0x00, 0xDE, 0x0B, 0x00, 0xFC, 0xFF, 
  0xFF, 0x1F, 0x00, 0x5E, 0x55, 0x00, 0xFC, 0xFF, 0xFF, 0x0F, 0x00, 0xFA, 
  0x0E, 0x00, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0x7E, 0x07, 0x00, 0xFF, 0xFF, 
  0xFF, 0x4F, 0x00, 0xDC, 0x2D, 0x00, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xF4, 
  0x83, 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0xE8, 0x15, 0x00, 0xFE, 0xFF, 
  0xFF, 0x0F, 0x00, 0x50, 0x02, 0x10, 0xFC, 0xFF, 0xFF, 0x3F, 0x80, 0x00, 
  0x08, 0x60, 0xFE, 0xFF, 0xFF, 0xFF, 0x0F, 0x18, 0x01, 0xC0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 
  0x02, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x04, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x04, 0x04, 0xC2, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x02, 
  0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x06, 0x10, 0xDC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x9F, 0x09, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x0C, 
  0x22, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x36, 0x7E, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
}; 


byte imgData2[] PROGMEM = {//dog64
 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x3F, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 
  0xFF, 0x1F, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x1F, 0xC0, 0xFF, 
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 
  0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0x3F, 0x24, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 
  0xFF, 0x1F, 0x58, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 0xFF, 0x1F, 0x21, 0xF8, 
  0xFF, 0x03, 0xC1, 0xFF, 0xFF, 0x1F, 0x14, 0xF8, 0xFF, 0x83, 0xC0, 0xFF, 
  0xFF, 0x1F, 0x19, 0xF8, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0x0F, 0x04, 0xFC, 
  0xFF, 0x87, 0xC0, 0xFF, 0xFF, 0x1F, 0x02, 0xDE, 0xFF, 0x1F, 0x80, 0xFF, 
  0xFF, 0x0F, 0x0C, 0xDF, 0xFF, 0x1B, 0x00, 0xFE, 0xFF, 0x0F, 0x8E, 0xFF, 
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x07, 0x87, 0xEF, 0xF5, 0x3B, 0x00, 0xF8, 
  0xFF, 0x07, 0x9C, 0xFB, 0xDF, 0xFF, 0x00, 0xF8, 0xFF, 0x07, 0xC8, 0xBD, 
  0xB3, 0xC7, 0x00, 0xE0, 0xFF, 0x07, 0xE0, 0xFF, 0x81, 0x07, 0x01, 0xE0, 
  0xFF, 0x07, 0xE0, 0xBE, 0x00, 0x06, 0x23, 0xE0, 0xFF, 0x0F, 0x60, 0xFF, 
  0x01, 0x06, 0x66, 0xC0, 0xFF, 0x1F, 0xF0, 0x7F, 0x00, 0x0C, 0x38, 0x80, 
  0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0x04, 0x70, 0x80, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0x08, 0x40, 0x00, 0xFF, 0xFF, 0xFB, 0x9B, 0x0F, 0x00, 0x7C, 0x00, 
  0xFF, 0xFF, 0xFF, 0xEF, 0x3B, 0x00, 0x6E, 0x00, 0xFF, 0xFF, 0xFF, 0xE3, 
  0x7D, 0x00, 0xF8, 0x00, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0x00, 0xFF, 0x00, 
  0xFF, 0xFF, 0xFF, 0x83, 0x7F, 0x00, 0xE6, 0x81, 0xFF, 0xFF, 0xFF, 0x03, 
  0x80, 0x00, 0xE0, 0x05, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0x83, 
  0xFF, 0xFF, 0x7F, 0x20, 0x80, 0x00, 0xC0, 0xC7, 0xFF, 0xFF, 0x1F, 0x00, 
  0x00, 0x00, 0xC0, 0xC7, 0xFF, 0xFF, 0x0F, 0x80, 0x00, 0x00, 0x80, 0xE7, 
  0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xFF, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0xF8, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xF7, 
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x02, 0x7E, 0xFF, 0xFF, 0xFF, 0x00, 0x10, 
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x50, 0x60, 0x02, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x02, 0x60, 0xC1, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x01, 0xF0, 
  0x51, 0x01, 0xFE, 0xFB, 0xFF, 0xFF, 0x03, 0xE0, 0xC9, 0x02, 0xFE, 0xF9, 
  0xFF, 0xFF, 0x03, 0xA0, 0x66, 0x05, 0xFC, 0xF9, 0xFF, 0xFF, 0x27, 0x90, 
  0xFB, 0x03, 0xFE, 0xF9, 0xFF, 0xFF, 0x1F, 0xB8, 0xF7, 0x07, 0x7C, 0xFC, 
  0xFF, 0xFF, 0xA7, 0x7E, 0xFF, 0x11, 0xFF, 0xFC, 0xFF, 0xFE, 0x5F, 0xF8, 
  0xFF, 0xBF, 0x3F, 0xFF, 0xFF, 0xFF, 0x7F, 0xED, 0xF7, 0x7F, 0x9D, 0xFF, 
  0xFF, 0xF7, 0x1F, 0xB8, 0xFF, 0x7F, 0xC8, 0xFF, 0xFF, 0xF7, 0x2F, 0xE1, 
  0xFF, 0x1F, 0xF5, 0xFF, 0xFF, 0xE7, 0x3F, 0x90, 0xFF, 0x01, 0xFE, 0xFF, 
  0xFF, 0x9E, 0x9F, 0xC8, 0xFF, 0x01, 0xFD, 0xFF, 0xFF, 0x1F, 0x9F, 0x91, 
  0xBF, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x3E, 0xE1, 0x3A, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1A, 0x40, 0x0F, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x09, 0x06, 
  0x00, 0x00, 0xF6, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x13, 0x00, 0x00, 0x00, 0xEA, 0xFF, 0xFE, 0xFF, 0x06, 0x00, 
  0x00, 0x00, 0xF4, 0xFF, 0xFE, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0xFF, 0x0F, 0x00, 
  0x00, 0x00, 0xEF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x4F, 0x00, 0x00, 0x80, 0xF7, 0xFF,
}; 

byte imgData3[] PROGMEM = {//man80x64
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xAB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD3, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 
  0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x9E, 0xFE, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6F, 0xDB, 0xFD, 0xF7, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFD, 0xDF, 0xFF, 0xFD, 0xFF, 0x07, 0xF2, 
  0xFF, 0xFF, 0xDF, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x10, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x1F, 0x48, 0x70, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
  0x10, 0x78, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xC7, 0xEB, 0x7D, 
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x7F, 0xE2, 0xCB, 0xFF, 
  0xFF, 0xFE, 0xFF, 0xFF, 0xFB, 0xE1, 0xEF, 0xC1, 0x83, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xDF, 0xFB, 0x9F, 0xC0, 0xA7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFB, 0x17, 0x00, 0x1F, 0xFE, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 
  0x06, 0x00, 0x8F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF8, 0x03, 0x00, 
  0x67, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x03, 0x00, 0xBE, 0xFF, 
  0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0x08, 0x10, 0xFF, 0xFF, 0xEF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFB, 0x1F, 0x2E, 0xEE, 0xFF, 0xEF, 0xFF, 0xFB, 0xFF, 
  0xFF, 0x7F, 0x71, 0x5A, 0xBC, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0x7E, 
  0x7E, 0x34, 0xFE, 0xFF, 0xFF, 0xFD, 0xF7, 0xFF, 0xFF, 0xFF, 0x2B, 0x00, 
  0xFC, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x28, 0x00, 0xB8, 0xFF, 
  0xF7, 0xFE, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x3F, 0x10, 0x00, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x7F, 0x00, 0x02, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6F, 
  0xF4, 0x22, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x42, 0x40, 
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x5B, 0x02, 0xF0, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x3C, 0x30, 0xFC, 0xFF, 0xFD, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x2B, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x23, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x95, 0x00, 
  0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x80, 0xF4, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x60, 0xFC, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x39, 0x10, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFB, 0x1F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xF7, 0x0F, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0x09, 
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x69, 0x04, 0xC0, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x97, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x59, 0x01, 0x00, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x7F, 0x44, 0x00, 0x00, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 
  0xA6, 0x29, 0x80, 0x8B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x48, 0x0A, 
  0xC0, 0x3E, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xA4, 0x23, 0xC0, 0xD5, 
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x69, 0x24, 0x70, 0x6F, 0xC7, 0xFF, 
  0xFF, 0xFF, 0x3F, 0x01, 0x94, 0x01, 0xD0, 0xFD, 0x9D, 0xFF, 0xFF, 0xFF, 
  0x5F, 0x03, 0x28, 0x0A, 0xF8, 0x6F, 0x73, 0xFE, 0xFF, 0xFF, 0xCF, 0x07, 
  0x20, 0x0A, 0xBC, 0x7B, 0x77, 0xFE, 0xFF, 0xFF, 0x77, 0x0F, 0x00, 0x80, 
  0xFF, 0xFD, 0xBD, 0xFF, 0xFF, 0xFF, 0xD5, 0x0E, 0x00, 0xE0, 0xEF, 0xFD, 
  0xFF, 0xFD, 0xFF, 0xFF, 0xFC, 0x7F, 0x02, 0xF8, 0x7F, 0xEF, 0xEF, 0xFF, 
  0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFA, 0xFF, 0xFD, 0xFF, 0xDF, 
  0xFE, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xEF, 0xFE, 0xFB, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x7B, 0xFF, 0xFF, 0xFB,
}; 

WiFiServer server(80);

void IRAM_ATTR displayOsci(byte * frame, int xres, int yres, double xd, double yd){
  DACPrepare(true);
  int i,j,k,z,yi=yres,y2=(xres+1)*(yres+1)/8,stp=y2/(yres+1);
  for(k =y2; k >= stp; k-=stp){//2*yres+1=31
    //Serial.println("loop1");
      z=k;
      for(j = 0;j <=xres ; j++){
        //Serial.println("loop2");
        i=j;
        if(j>=8){
          i=j-8*(int)(j/8.0);
          z=k-(int)(j/8.0) ;
        }
        byte mask = 0x01 << i;
        byte answer = (frame[y2-z] & mask) >> i;
        if (answer != 0x01) {
          DAC1Write(round((double)j * xd / (double)xres));//dac_output_voltage(DAC_CHANNEL_1, round((float)j * 255.0 / (float)xres));
          DAC2Write(round((double)yi * yd / (double)yres));//dac_output_voltage(DAC_CHANNEL_2, round((float)yi * 255.0 / (float)yres));
           
           /*Serial.print("x:");
           Serial.println(round((float)j * 255.0 / (float)xres));
           Serial.print("y:");
           Serial.println(round((float)yi * 255.0 / (float)yres));*/
         // delayMicroseconds(10);//depende da qtd de pontos
        } 
      }
    yi=yi-1;
  }
   DACUnprepare(true);
  
}
void IRAM_ATTR irq_handler() {
  displayOsci(imgData, xres, yres,xo,yo);
}


void timer_start_task(void *argm) {
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &irq_handler, true);
  timerAlarmWrite(timer, 20000, true); // 1.000.000 us = 1s
  timerAlarmEnable(timer);

    vTaskDelete(NULL);
}

void setup()
{
  copy(imgData1, imgData, 512);
    Serial.begin(115200);
    dac_output_enable(DAC_CHANNEL_1);
  dac_output_enable(DAC_CHANNEL_2);
   rtc_clk_cpu_freq_set(RTC_CPU_FREQ_240M);
  Serial.println("CPU Clockspeed: ");
  Serial.println(rtc_clk_cpu_freq_value(rtc_clk_cpu_freq_get()));
  

    delay(10);

    // We start by connecting to a WiFi network

    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("");
    Serial.println("WiFi connected.");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    
    server.begin();

    // create timer interrupt
    xTaskCreatePinnedToCore(timer_start_task, "timer_start", 4096, NULL, 0, NULL,1);//All ESP-IDF protocol stuff (UART, WiFi, BLE, etc.) run in CPU 0 (PRO_CPU_NUM)

}

int value = 0;

//COMENTAR OS SERIAL.PRINT
void loop(){
 WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    //Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
       // Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("<div style='text-align:center'><h1 >Escolha uma foto </h1>"); 
            client.print("<a href=\'/1\'><img alt='cachorro' src='https://images.pexels.com/photos/8131025/pexels-photo-8131025.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'width=96 height=96><br></a>");
            client.print("<a href=\'/2\'><img alt='flor' src='https://images.pexels.com/photos/8480217/pexels-photo-8480217.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'width=96 height=96><br></a>");
            client.print("<a href=\'/3\'><img alt='pessoa' src='https://images.pexels.com/photos/91227/pexels-photo-91227.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'width=112 height=96></a></div>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /1")) {
          xres=63;               
          yres=63;
          xo=255.0;
          yo=255.0;
          copy(imgData2, imgData, 512);
        }
        if (currentLine.endsWith("GET /2")) {
          xres=63;               
          yres=63;
          xo=255.0;
          yo=255.0;
          copy(imgData1, imgData, 512);
        }
        if (currentLine.endsWith("GET /3")) {
          xres=79;               
          yres=63;
          xo=255.0;
          yo=191.25;
         copy(imgData3, imgData, 640);
        }
      }
       
    }
    // close the connection:
    client.stop();
    //Serial.println("Client Disconnected.");
  }
 
}
