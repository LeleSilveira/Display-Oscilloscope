#include <driver/dac.h>
#include "FastDAC.h"
int xres = 63; //16-1
int yres = 63; //16-1
hw_timer_t * timer = NULL;

byte imgData2[] PROGMEM = {//flor64
  0xFF, 0xFF, 0xDF, 0x7B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 
  0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x7B, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFD, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFF, 0xFF, 0x07, 0x37, 0xFF, 0xFF, 0x7F, 
  0xE7, 0xFF, 0xFF, 0x07, 0x1F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x04, 
  0x0F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFD, 0x07, 0x00, 0x06, 0xFE, 0xFF, 0xFF, 
  0xEB, 0xFF, 0x07, 0x08, 0x06, 0xFE, 0xFF, 0xFF, 0xBF, 0xFB, 0x0F, 0x00, 
  0x02, 0xC2, 0xFF, 0xFF, 0xF7, 0xFF, 0x08, 0x00, 0x02, 0xC1, 0xFF, 0xFF, 
  0xDF, 0x7F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x57, 0x00, 0x00, 
  0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xF7, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x07, 0x20, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x02, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x50, 0x10, 0x00, 0xFF, 0xFF, 
  0xFF, 0x07, 0x00, 0xE8, 0x03, 0x00, 0xF8, 0xFF, 0xFF, 0x07, 0x00, 0xB8, 
  0x06, 0x00, 0xF8, 0xFF, 0xFF, 0x07, 0x00, 0xDE, 0x0B, 0x00, 0xFC, 0xFF, 
  0xFF, 0x1F, 0x00, 0x5E, 0x55, 0x00, 0xFC, 0xFF, 0xFF, 0x0F, 0x00, 0xFA, 
  0x0E, 0x00, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0x7E, 0x07, 0x00, 0xFF, 0xFF, 
  0xFF, 0x4F, 0x00, 0xDC, 0x2D, 0x00, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0xF4, 
  0x83, 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0xE8, 0x15, 0x00, 0xFE, 0xFF, 
  0xFF, 0x0F, 0x00, 0x50, 0x02, 0x10, 0xFC, 0xFF, 0xFF, 0x3F, 0x80, 0x00, 
  0x08, 0x60, 0xFE, 0xFF, 0xFF, 0xFF, 0x0F, 0x18, 0x01, 0xC0, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 
  0x02, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x04, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1F, 0x04, 0x04, 0xC2, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x02, 
  0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x06, 0x10, 0xDC, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x9F, 0x09, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0x0C, 
  0x22, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x36, 0x7E, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x1F, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
}; 

byte imgData4[] PROGMEM = {//dog64
  0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x3F, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0xFE, 
  0xFF, 0x1F, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x1F, 0xC0, 0xFF, 
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0xFE, 
  0xFF, 0x0F, 0xC0, 0xFF, 0xFF, 0x3F, 0x24, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 
  0xFF, 0x1F, 0x58, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 0xFF, 0x1F, 0x21, 0xF8, 
  0xFF, 0x03, 0xC1, 0xFF, 0xFF, 0x1F, 0x14, 0xF8, 0xFF, 0x83, 0xC0, 0xFF, 
  0xFF, 0x1F, 0x19, 0xF8, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0x0F, 0x04, 0xFC, 
  0xFF, 0x87, 0xC0, 0xFF, 0xFF, 0x1F, 0x02, 0xDE, 0xFF, 0x1F, 0x80, 0xFF, 
  0xFF, 0x0F, 0x0C, 0xDF, 0xFF, 0x1B, 0x00, 0xFE, 0xFF, 0x0F, 0x8E, 0xFF, 
  0xFF, 0x7F, 0x00, 0xFE, 0xFF, 0x07, 0x87, 0xEF, 0xF5, 0x3B, 0x00, 0xF8, 
  0xFF, 0x07, 0x9C, 0xFB, 0xDF, 0xFF, 0x00, 0xF8, 0xFF, 0x07, 0xC8, 0xBD, 
  0xB3, 0xC7, 0x00, 0xE0, 0xFF, 0x07, 0xE0, 0xFF, 0x81, 0x07, 0x01, 0xE0, 
  0xFF, 0x07, 0xE0, 0xBE, 0x00, 0x06, 0x23, 0xE0, 0xFF, 0x0F, 0x60, 0xFF, 
  0x01, 0x06, 0x66, 0xC0, 0xFF, 0x1F, 0xF0, 0x7F, 0x00, 0x0C, 0x38, 0x80, 
  0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0x04, 0x70, 0x80, 0xFF, 0xFF, 0xFF, 0x0F, 
  0x00, 0x08, 0x40, 0x00, 0xFF, 0xFF, 0xFB, 0x9B, 0x0F, 0x00, 0x7C, 0x00, 
  0xFF, 0xFF, 0xFF, 0xEF, 0x3B, 0x00, 0x6E, 0x00, 0xFF, 0xFF, 0xFF, 0xE3, 
  0x7D, 0x00, 0xF8, 0x00, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0x00, 0xFF, 0x00, 
  0xFF, 0xFF, 0xFF, 0x83, 0x7F, 0x00, 0xE6, 0x81, 0xFF, 0xFF, 0xFF, 0x03, 
  0x80, 0x00, 0xE0, 0x05, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0x83, 
  0xFF, 0xFF, 0x7F, 0x20, 0x80, 0x00, 0xC0, 0xC7, 0xFF, 0xFF, 0x1F, 0x00, 
  0x00, 0x00, 0xC0, 0xC7, 0xFF, 0xFF, 0x0F, 0x80, 0x00, 0x00, 0x80, 0xE7, 
  0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xFF, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0xF8, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xF7, 
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x02, 0x7E, 0xFF, 0xFF, 0xFF, 0x00, 0x10, 
  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x50, 0x60, 0x02, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x02, 0x60, 0xC1, 0x00, 0xFF, 0xFB, 0xFF, 0xFF, 0x01, 0xF0, 
  0x51, 0x01, 0xFE, 0xFB, 0xFF, 0xFF, 0x03, 0xE0, 0xC9, 0x02, 0xFE, 0xF9, 
  0xFF, 0xFF, 0x03, 0xA0, 0x66, 0x05, 0xFC, 0xF9, 0xFF, 0xFF, 0x27, 0x90, 
  0xFB, 0x03, 0xFE, 0xF9, 0xFF, 0xFF, 0x1F, 0xB8, 0xF7, 0x07, 0x7C, 0xFC, 
  0xFF, 0xFF, 0xA7, 0x7E, 0xFF, 0x11, 0xFF, 0xFC, 0xFF, 0xFE, 0x5F, 0xF8, 
  0xFF, 0xBF, 0x3F, 0xFF, 0xFF, 0xFF, 0x7F, 0xED, 0xF7, 0x7F, 0x9D, 0xFF, 
  0xFF, 0xF7, 0x1F, 0xB8, 0xFF, 0x7F, 0xC8, 0xFF, 0xFF, 0xF7, 0x2F, 0xE1, 
  0xFF, 0x1F, 0xF5, 0xFF, 0xFF, 0xE7, 0x3F, 0x90, 0xFF, 0x01, 0xFE, 0xFF, 
  0xFF, 0x9E, 0x9F, 0xC8, 0xFF, 0x01, 0xFD, 0xFF, 0xFF, 0x1F, 0x9F, 0x91, 
  0xBF, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x3E, 0xE1, 0x3A, 0x00, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x1A, 0x40, 0x0F, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x09, 0x06, 
  0x00, 0x00, 0xF6, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x13, 0x00, 0x00, 0x00, 0xEA, 0xFF, 0xFE, 0xFF, 0x06, 0x00, 
  0x00, 0x00, 0xF4, 0xFF, 0xFE, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFE, 0xFF, 
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0xFF, 0x0F, 0x00, 
  0x00, 0x00, 0xEF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x80, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x4F, 0x00, 0x00, 0x80, 0xF7, 0xFF, 
}; 

void IRAM_ATTR displayOsci(byte * frame, int xres, int yres, double xo, double yo){
  DACPrepare(true);
  int i,j,k,z,yi=yres,stp=(int)((yres+1)/8.0),y2=stp*yres+1;
  for(k =y2; k >= 0; k-=stp){//2*yres+1=31
    //Serial.println("loop1");
      z=k;
      for(j = 0;j <=xres ; j++){
        //Serial.println("loop2");
        i=j;
        if(j>=8){
          i=j-8*(int)(j/8.0);
          z=k-(int)(j/8.0) ;
        }
        byte mask = 0x01 << i;
        byte answer = (frame[y2-z] & mask) >> i;
        if (answer != 0x01) {
          DAC1Write(round((double)j * xo / (double)xres));//dac_output_voltage(DAC_CHANNEL_1, round((float)j * 255.0 / (float)xres));
          DAC2Write(round((double)yi * yo / (double)yres));//dac_output_voltage(DAC_CHANNEL_2, round((float)yi * 255.0 / (float)yres));
         // delayMicroseconds(10);//depende da qtd de pontos
        } 
      }
    yi=yi-1;
  }
   DACUnprepare(true);
  
}

void IRAM_ATTR irq_handler() {
  displayOsci(imgData4, 63, 63,255.0,255.0);//4,63,63
}

void timer_start_task(void *argm) {
     timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, &irq_handler, true);
  timerAlarmWrite(timer, 20500, true); // 1.000.000 us = 1s
  timerAlarmEnable(timer);

    vTaskDelete(NULL);
}

void setup() {
  dac_output_enable(DAC_CHANNEL_1);
  dac_output_enable(DAC_CHANNEL_2);
  Serial.begin(115200);
  rtc_clk_cpu_freq_set(RTC_CPU_FREQ_240M);
  Serial.println("CPU Clockspeed: ");
  Serial.println(rtc_clk_cpu_freq_value(rtc_clk_cpu_freq_get()));   //PRO_CPU_NUM ou 0
  xTaskCreatePinnedToCore(timer_start_task, "timer_start", 4096, NULL, 0, NULL,PRO_CPU_NUM);//All ESP-IDF protocol stuff (UART, WiFi, BLE, etc.) run in CPU 0 (PRO_CPU_NUM)
 
}


//interrupção options: desenhar a img toda, desenhar um pixel
void loop() {
  //displayOsci(imgData4, 63, 63,255.0,255.0);//4,63,63
  
}
